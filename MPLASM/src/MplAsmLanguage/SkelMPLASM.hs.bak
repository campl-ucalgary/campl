-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module MplAsmLanguage.SkelMPLASM where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified MplAsmLanguage.AbsMPLASM

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transStore :: MplAsmLanguage.AbsMPLASM.Store -> Result
transStore x = case x of
  MplAsmLanguage.AbsMPLASM.Store string -> failure x

transLoad :: MplAsmLanguage.AbsMPLASM.Load -> Result
transLoad x = case x of
  MplAsmLanguage.AbsMPLASM.Load string -> failure x

transRet :: MplAsmLanguage.AbsMPLASM.Ret -> Result
transRet x = case x of
  MplAsmLanguage.AbsMPLASM.Ret string -> failure x

transCall :: MplAsmLanguage.AbsMPLASM.Call -> Result
transCall x = case x of
  MplAsmLanguage.AbsMPLASM.Call string -> failure x

transCInt :: MplAsmLanguage.AbsMPLASM.CInt -> Result
transCInt x = case x of
  MplAsmLanguage.AbsMPLASM.CInt string -> failure x

transCChar :: MplAsmLanguage.AbsMPLASM.CChar -> Result
transCChar x = case x of
  MplAsmLanguage.AbsMPLASM.CChar string -> failure x

transCBool :: MplAsmLanguage.AbsMPLASM.CBool -> Result
transCBool x = case x of
  MplAsmLanguage.AbsMPLASM.CBool string -> failure x

transCString :: MplAsmLanguage.AbsMPLASM.CString -> Result
transCString x = case x of
  MplAsmLanguage.AbsMPLASM.CString string -> failure x

transToStr :: MplAsmLanguage.AbsMPLASM.ToStr -> Result
transToStr x = case x of
  MplAsmLanguage.AbsMPLASM.ToStr string -> failure x

transToInt :: MplAsmLanguage.AbsMPLASM.ToInt -> Result
transToInt x = case x of
  MplAsmLanguage.AbsMPLASM.ToInt string -> failure x

transAnd :: MplAsmLanguage.AbsMPLASM.And -> Result
transAnd x = case x of
  MplAsmLanguage.AbsMPLASM.And string -> failure x

transOr :: MplAsmLanguage.AbsMPLASM.Or -> Result
transOr x = case x of
  MplAsmLanguage.AbsMPLASM.Or string -> failure x

transAppend :: MplAsmLanguage.AbsMPLASM.Append -> Result
transAppend x = case x of
  MplAsmLanguage.AbsMPLASM.Append string -> failure x

transUnstring :: MplAsmLanguage.AbsMPLASM.Unstring -> Result
transUnstring x = case x of
  MplAsmLanguage.AbsMPLASM.Unstring string -> failure x

transLeqI :: MplAsmLanguage.AbsMPLASM.LeqI -> Result
transLeqI x = case x of
  MplAsmLanguage.AbsMPLASM.LeqI string -> failure x

transEqI :: MplAsmLanguage.AbsMPLASM.EqI -> Result
transEqI x = case x of
  MplAsmLanguage.AbsMPLASM.EqI string -> failure x

transEqB :: MplAsmLanguage.AbsMPLASM.EqB -> Result
transEqB x = case x of
  MplAsmLanguage.AbsMPLASM.EqB string -> failure x

transLeqC :: MplAsmLanguage.AbsMPLASM.LeqC -> Result
transLeqC x = case x of
  MplAsmLanguage.AbsMPLASM.LeqC string -> failure x

transEqC :: MplAsmLanguage.AbsMPLASM.EqC -> Result
transEqC x = case x of
  MplAsmLanguage.AbsMPLASM.EqC string -> failure x

transLeqs :: MplAsmLanguage.AbsMPLASM.Leqs -> Result
transLeqs x = case x of
  MplAsmLanguage.AbsMPLASM.Leqs string -> failure x

transEqs :: MplAsmLanguage.AbsMPLASM.Eqs -> Result
transEqs x = case x of
  MplAsmLanguage.AbsMPLASM.Eqs string -> failure x

transConcatS :: MplAsmLanguage.AbsMPLASM.ConcatS -> Result
transConcatS x = case x of
  MplAsmLanguage.AbsMPLASM.ConcatS string -> failure x

transAdd :: MplAsmLanguage.AbsMPLASM.Add -> Result
transAdd x = case x of
  MplAsmLanguage.AbsMPLASM.Add string -> failure x

transSubtract :: MplAsmLanguage.AbsMPLASM.Subtract -> Result
transSubtract x = case x of
  MplAsmLanguage.AbsMPLASM.Subtract string -> failure x

transMul :: MplAsmLanguage.AbsMPLASM.Mul -> Result
transMul x = case x of
  MplAsmLanguage.AbsMPLASM.Mul string -> failure x

transQuot :: MplAsmLanguage.AbsMPLASM.Quot -> Result
transQuot x = case x of
  MplAsmLanguage.AbsMPLASM.Quot string -> failure x

transRem :: MplAsmLanguage.AbsMPLASM.Rem -> Result
transRem x = case x of
  MplAsmLanguage.AbsMPLASM.Rem string -> failure x

transCase :: MplAsmLanguage.AbsMPLASM.Case -> Result
transCase x = case x of
  MplAsmLanguage.AbsMPLASM.Case string -> failure x

transIf :: MplAsmLanguage.AbsMPLASM.If -> Result
transIf x = case x of
  MplAsmLanguage.AbsMPLASM.If string -> failure x

transRec :: MplAsmLanguage.AbsMPLASM.Rec -> Result
transRec x = case x of
  MplAsmLanguage.AbsMPLASM.Rec string -> failure x

transGet :: MplAsmLanguage.AbsMPLASM.Get -> Result
transGet x = case x of
  MplAsmLanguage.AbsMPLASM.Get string -> failure x

transPut :: MplAsmLanguage.AbsMPLASM.Put -> Result
transPut x = case x of
  MplAsmLanguage.AbsMPLASM.Put string -> failure x

transHput :: MplAsmLanguage.AbsMPLASM.Hput -> Result
transHput x = case x of
  MplAsmLanguage.AbsMPLASM.Hput string -> failure x

transShput :: MplAsmLanguage.AbsMPLASM.Shput -> Result
transShput x = case x of
  MplAsmLanguage.AbsMPLASM.Shput string -> failure x

transHcase :: MplAsmLanguage.AbsMPLASM.Hcase -> Result
transHcase x = case x of
  MplAsmLanguage.AbsMPLASM.Hcase string -> failure x

transSplit :: MplAsmLanguage.AbsMPLASM.Split -> Result
transSplit x = case x of
  MplAsmLanguage.AbsMPLASM.Split string -> failure x

transFork :: MplAsmLanguage.AbsMPLASM.Fork -> Result
transFork x = case x of
  MplAsmLanguage.AbsMPLASM.Fork string -> failure x

transPlug :: MplAsmLanguage.AbsMPLASM.Plug -> Result
transPlug x = case x of
  MplAsmLanguage.AbsMPLASM.Plug string -> failure x

transRun :: MplAsmLanguage.AbsMPLASM.Run -> Result
transRun x = case x of
  MplAsmLanguage.AbsMPLASM.Run string -> failure x

transRace :: MplAsmLanguage.AbsMPLASM.Race -> Result
transRace x = case x of
  MplAsmLanguage.AbsMPLASM.Race string -> failure x

transClose :: MplAsmLanguage.AbsMPLASM.Close -> Result
transClose x = case x of
  MplAsmLanguage.AbsMPLASM.Close string -> failure x

transHalt :: MplAsmLanguage.AbsMPLASM.Halt -> Result
transHalt x = case x of
  MplAsmLanguage.AbsMPLASM.Halt string -> failure x

transCh_Id :: MplAsmLanguage.AbsMPLASM.Ch_Id -> Result
transCh_Id x = case x of
  MplAsmLanguage.AbsMPLASM.Ch_Id string -> failure x

transMain_run :: MplAsmLanguage.AbsMPLASM.Main_run -> Result
transMain_run x = case x of
  MplAsmLanguage.AbsMPLASM.Main_run string -> failure x

transBBool :: MplAsmLanguage.AbsMPLASM.BBool -> Result
transBBool x = case x of
  MplAsmLanguage.AbsMPLASM.BBool string -> failure x

transCharacter :: MplAsmLanguage.AbsMPLASM.Character -> Result
transCharacter x = case x of
  MplAsmLanguage.AbsMPLASM.Character string -> failure x

transUIdent :: MplAsmLanguage.AbsMPLASM.UIdent -> Result
transUIdent x = case x of
  MplAsmLanguage.AbsMPLASM.UIdent string -> failure x

transPIdent :: MplAsmLanguage.AbsMPLASM.PIdent -> Result
transPIdent x = case x of
  MplAsmLanguage.AbsMPLASM.PIdent string -> failure x

transPInteger :: MplAsmLanguage.AbsMPLASM.PInteger -> Result
transPInteger x = case x of
  MplAsmLanguage.AbsMPLASM.PInteger string -> failure x

transIIdent :: MplAsmLanguage.AbsMPLASM.IIdent -> Result
transIIdent x = case x of
  MplAsmLanguage.AbsMPLASM.IIdent string -> failure x

transAMPLCODE :: MplAsmLanguage.AbsMPLASM.AMPLCODE -> Result
transAMPLCODE x = case x of
  MplAsmLanguage.AbsMPLASM.AMPLCODE amplconstructss main -> failure x

transAmplConstructs :: MplAsmLanguage.AbsMPLASM.AmplConstructs -> Result
transAmplConstructs x = case x of
  MplAsmLanguage.AbsMPLASM.IMPORT_CONSTRUCT import_ -> failure x
  MplAsmLanguage.AbsMPLASM.PROTOCOL_CONSTRUCT protocols -> failure x
  MplAsmLanguage.AbsMPLASM.COPROTOCOL_CONSTRUCT coprotocols -> failure x
  MplAsmLanguage.AbsMPLASM.CONSTRUCTOR_CONSTRUCT constructors -> failure x
  MplAsmLanguage.AbsMPLASM.DESTRUCTOR_CONSTRUCT destructors -> failure x
  MplAsmLanguage.AbsMPLASM.PROCESSES_CONSTRUCT processes -> failure x
  MplAsmLanguage.AbsMPLASM.FUNCTIONS_CONSTRUCT functions -> failure x

transProtocolCoprotocolSpec :: MplAsmLanguage.AbsMPLASM.ProtocolCoprotocolSpec -> Result
transProtocolCoprotocolSpec x = case x of
  MplAsmLanguage.AbsMPLASM.PROTOCOL_COPROTOCOL_SPEC uident handles -> failure x

transHandle :: MplAsmLanguage.AbsMPLASM.Handle -> Result
transHandle x = case x of
  MplAsmLanguage.AbsMPLASM.HANDLE_NAME uident -> failure x

transImport :: MplAsmLanguage.AbsMPLASM.Import -> Result
transImport x = case x of
  MplAsmLanguage.AbsMPLASM.IMPORT iident -> failure x

transConstructors :: MplAsmLanguage.AbsMPLASM.Constructors -> Result
transConstructors x = case x of
  MplAsmLanguage.AbsMPLASM.CONSTRUCTORS structorspecs -> failure x

transDestructors :: MplAsmLanguage.AbsMPLASM.Destructors -> Result
transDestructors x = case x of
  MplAsmLanguage.AbsMPLASM.DESTRUCTORS structorspecs -> failure x

transStructorSpec :: MplAsmLanguage.AbsMPLASM.StructorSpec -> Result
transStructorSpec x = case x of
  MplAsmLanguage.AbsMPLASM.STRUCT_SPEC uident structs -> failure x

transStruct :: MplAsmLanguage.AbsMPLASM.Struct -> Result
transStruct x = case x of
  MplAsmLanguage.AbsMPLASM.STRUCT uident pinteger -> failure x

transProtocols :: MplAsmLanguage.AbsMPLASM.Protocols -> Result
transProtocols x = case x of
  MplAsmLanguage.AbsMPLASM.PROTOCOLS protocolcoprotocolspecs -> failure x

transCoprotocols :: MplAsmLanguage.AbsMPLASM.Coprotocols -> Result
transCoprotocols x = case x of
  MplAsmLanguage.AbsMPLASM.COPROTOCOLS protocolcoprotocolspecs -> failure x

transProcesses :: MplAsmLanguage.AbsMPLASM.Processes -> Result
transProcesses x = case x of
  MplAsmLanguage.AbsMPLASM.PROCESSES processesspecs -> failure x

transProcessesSpec :: MplAsmLanguage.AbsMPLASM.ProcessesSpec -> Result
transProcessesSpec x = case x of
  MplAsmLanguage.AbsMPLASM.PROCESS_SPEC pident pidents1 pidents2 pidents3 coms -> failure x

transFunctions :: MplAsmLanguage.AbsMPLASM.Functions -> Result
transFunctions x = case x of
  MplAsmLanguage.AbsMPLASM.FUNCTIONS functionsspecs -> failure x

transFunctionsSpec :: MplAsmLanguage.AbsMPLASM.FunctionsSpec -> Result
transFunctionsSpec x = case x of
  MplAsmLanguage.AbsMPLASM.FUNCTION_SPEC pident pidents coms -> failure x

transMain :: MplAsmLanguage.AbsMPLASM.Main -> Result
transMain x = case x of
  MplAsmLanguage.AbsMPLASM.MAIN mainrun mainchannels coms -> failure x
  MplAsmLanguage.AbsMPLASM.NO_MAIN -> failure x

transMainChannels :: MplAsmLanguage.AbsMPLASM.MainChannels -> Result
transMainChannels x = case x of
  MplAsmLanguage.AbsMPLASM.MAIN_CHANNELS pidents1 pidents2 -> failure x

transComs :: MplAsmLanguage.AbsMPLASM.Coms -> Result
transComs x = case x of
  MplAsmLanguage.AbsMPLASM.Prog coms -> failure x

transCom :: MplAsmLanguage.AbsMPLASM.Com -> Result
transCom x = case x of
  MplAsmLanguage.AbsMPLASM.AC_ASSIGN pident com -> failure x
  MplAsmLanguage.AbsMPLASM.AC_STORE store pident -> failure x
  MplAsmLanguage.AbsMPLASM.AC_LOAD load pident -> failure x
  MplAsmLanguage.AbsMPLASM.AC_RET ret -> failure x
  MplAsmLanguage.AbsMPLASM.AC_CALL_FUN call pident pidents -> failure x
  MplAsmLanguage.AbsMPLASM.AC_INT cint pinteger -> failure x
  MplAsmLanguage.AbsMPLASM.AC_CHAR cchar character -> failure x
  MplAsmLanguage.AbsMPLASM.AC_STRING cstring string -> failure x
  MplAsmLanguage.AbsMPLASM.AC_TOSTR tostr -> failure x
  MplAsmLanguage.AbsMPLASM.AC_TOINT toint -> failure x
  MplAsmLanguage.AbsMPLASM.AC_AND and -> failure x
  MplAsmLanguage.AbsMPLASM.AC_OR or -> failure x
  MplAsmLanguage.AbsMPLASM.AC_APPEND append -> failure x
  MplAsmLanguage.AbsMPLASM.AC_BOOL cbool bbool -> failure x
  MplAsmLanguage.AbsMPLASM.AC_UNSTRING unstring -> failure x
  MplAsmLanguage.AbsMPLASM.AC_EQB eqb -> failure x
  MplAsmLanguage.AbsMPLASM.AC_LEQ leqi -> failure x
  MplAsmLanguage.AbsMPLASM.AC_EQI eqi -> failure x
  MplAsmLanguage.AbsMPLASM.AC_LEQC leqc -> failure x
  MplAsmLanguage.AbsMPLASM.AC_EQC eqc -> failure x
  MplAsmLanguage.AbsMPLASM.AC_LEQS leqs -> failure x
  MplAsmLanguage.AbsMPLASM.AC_EQS eqs -> failure x
  MplAsmLanguage.AbsMPLASM.AC_CONCAT concats integer -> failure x
  MplAsmLanguage.AbsMPLASM.AC_ADD add -> failure x
  MplAsmLanguage.AbsMPLASM.AC_SUB subtract -> failure x
  MplAsmLanguage.AbsMPLASM.AC_MUL mul -> failure x
  MplAsmLanguage.AbsMPLASM.AC_DIVQ quot -> failure x
  MplAsmLanguage.AbsMPLASM.AC_DIVR rem -> failure x
  MplAsmLanguage.AbsMPLASM.AC_CONSTRUCTOR uident1 uident2 -> failure x
  MplAsmLanguage.AbsMPLASM.AC_CONSTRUCTOR_ARGS uident1 uident2 pidents -> failure x
  MplAsmLanguage.AbsMPLASM.AC_CASE case_ pident labelledcomss -> failure x
  MplAsmLanguage.AbsMPLASM.AC_IF if_ pident coms1 coms2 -> failure x
  MplAsmLanguage.AbsMPLASM.AC_RECORD rec_ labelledcomss -> failure x
  MplAsmLanguage.AbsMPLASM.AC_DEST uident1 uident2 pident -> failure x
  MplAsmLanguage.AbsMPLASM.AC_DEST_ARGS uident1 uident2 pidents pident -> failure x
  MplAsmLanguage.AbsMPLASM.AC_PROD pidents -> failure x
  MplAsmLanguage.AbsMPLASM.AC_PRODELEM pinteger pident -> failure x
  MplAsmLanguage.AbsMPLASM.AC_EMSG string -> failure x
  MplAsmLanguage.AbsMPLASM.AC_GET get pident1 pident2 -> failure x
  MplAsmLanguage.AbsMPLASM.AC_PUT put pident1 pident2 -> failure x
  MplAsmLanguage.AbsMPLASM.AC_HPUT hput uident1 uident2 pident -> failure x
  MplAsmLanguage.AbsMPLASM.AC_SHPUT shput uident pident -> failure x
  MplAsmLanguage.AbsMPLASM.AC_HCASE hcase pident labelledcomss -> failure x
  MplAsmLanguage.AbsMPLASM.AC_SPLIT split pident1 pident2 pident3 -> failure x
  MplAsmLanguage.AbsMPLASM.AC_FORK fork pident1 pident2 pidents1 coms1 pident3 pidents2 coms2 -> failure x
  MplAsmLanguage.AbsMPLASM.AC_PLUG plug pidents1 pidents2 pidents3 coms1 pidents4 pidents5 coms2 -> failure x
  MplAsmLanguage.AbsMPLASM.AC_RUN run pident pidents1 pidents2 pidents3 -> failure x
  MplAsmLanguage.AbsMPLASM.AC_ID pident1 chid pident2 -> failure x
  MplAsmLanguage.AbsMPLASM.AC_RACE race racephrases -> failure x
  MplAsmLanguage.AbsMPLASM.AC_CLOSE close pident -> failure x
  MplAsmLanguage.AbsMPLASM.AC_HALT halt pident -> failure x

transLabelledComs :: MplAsmLanguage.AbsMPLASM.LabelledComs -> Result
transLabelledComs x = case x of
  MplAsmLanguage.AbsMPLASM.AC_LABELLED_COMS_NO_ARGS uident1 uident2 coms -> failure x
  MplAsmLanguage.AbsMPLASM.AC_LABELLED_COMS uident1 uident2 pidents coms -> failure x

transRACE_PHRASE :: MplAsmLanguage.AbsMPLASM.RACE_PHRASE -> Result
transRACE_PHRASE x = case x of
  MplAsmLanguage.AbsMPLASM.AC_RACE_PHRASE pident coms -> failure x
