-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language MPLASM.

module MplAsmLanguage.AbsMPLASM where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )

data AMPLCODE = AMPLCODE [AmplConstructs] Main
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AmplConstructs
    = IMPORT_CONSTRUCT Import
    | PROTOCOL_CONSTRUCT Protocols
    | COPROTOCOL_CONSTRUCT Coprotocols
    | CONSTRUCTOR_CONSTRUCT Constructors
    | DESTRUCTOR_CONSTRUCT Destructors
    | PROCESSES_CONSTRUCT Processes
    | FUNCTIONS_CONSTRUCT Functions
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ProtocolCoprotocolSpec
    = PROTOCOL_COPROTOCOL_SPEC UIdent [Handle]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Handle = HANDLE_NAME UIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Import = IMPORT IIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Constructors = CONSTRUCTORS [StructorSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Destructors = DESTRUCTORS [StructorSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructorSpec = STRUCT_SPEC UIdent [Struct]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Struct = STRUCT UIdent PInteger
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Protocols = PROTOCOLS [ProtocolCoprotocolSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Coprotocols = COPROTOCOLS [ProtocolCoprotocolSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Processes = PROCESSES [ProcessesSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ProcessesSpec
    = PROCESS_SPEC PIdent [PIdent] [PIdent] [PIdent] Coms
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Functions = FUNCTIONS [FunctionsSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionsSpec = FUNCTION_SPEC PIdent [PIdent] Coms
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Main = MAIN Main_run MainChannels Coms | NO_MAIN
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MainChannels = MAIN_CHANNELS [PIdent] [PIdent]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Coms = Prog [Com]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Com
    = AC_ASSIGN PIdent Com
    | AC_STORE Store PIdent
    | AC_LOAD Load PIdent
    | AC_RET Ret
    | AC_CALL_FUN Call PIdent [PIdent]
    | AC_INT CInt PInteger
    | AC_CHAR CChar Character
    | AC_STRING CString String
    | AC_TOSTR ToStr
    | AC_TOINT ToInt
    | AC_AND And
    | AC_OR Or
    | AC_APPEND Append
    | AC_BOOL CBool BBool
    | AC_UNSTRING Unstring
    | AC_EQB EqB
    | AC_LEQ LeqI
    | AC_EQI EqI
    | AC_LEQC LeqC
    | AC_EQC EqC
    | AC_LEQS Leqs
    | AC_EQS Eqs
    | AC_CONCAT ConcatS Integer
    | AC_ADD Add
    | AC_SUB Subtract
    | AC_MUL Mul
    | AC_DIVQ Quot
    | AC_DIVR Rem
    | AC_CONSTRUCTOR UIdent UIdent
    | AC_CONSTRUCTOR_ARGS UIdent UIdent [PIdent]
    | AC_CASE Case PIdent [LabelledComs]
    | AC_IF If PIdent Coms Coms
    | AC_RECORD Rec [LabelledComs]
    | AC_DEST UIdent UIdent PIdent
    | AC_DEST_ARGS UIdent UIdent [PIdent] PIdent
    | AC_PROD [PIdent]
    | AC_PRODELEM PInteger PIdent
    | AC_EMSG String
    | AC_GET Get PIdent PIdent
    | AC_PUT Put PIdent PIdent
    | AC_HPUT Hput UIdent UIdent PIdent
    | AC_SHPUT Shput UIdent PIdent
    | AC_HCASE Hcase PIdent [LabelledComs]
    | AC_SPLIT Split PIdent PIdent PIdent
    | AC_FORK Fork PIdent PIdent [PIdent] Coms PIdent [PIdent] Coms
    | AC_PLUG Plug [PIdent] [PIdent] [PIdent] Coms [PIdent] [PIdent] Coms
    | AC_RUN Run PIdent [PIdent] [PIdent] [PIdent]
    | AC_ID PIdent Ch_Id PIdent
    | AC_RACE Race [RACE_PHRASE]
    | AC_CLOSE Close PIdent
    | AC_HALT Halt PIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabelledComs
    = AC_LABELLED_COMS_NO_ARGS UIdent UIdent Coms
    | AC_LABELLED_COMS UIdent UIdent [PIdent] Coms
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RACE_PHRASE = AC_RACE_PHRASE PIdent Coms
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Store = Store ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Load = Load ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ret = Ret ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Call = Call ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype CInt = CInt ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype CChar = CChar ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype CBool = CBool ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype CString = CString ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype ToStr = ToStr ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype ToInt = ToInt ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype And = And ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Or = Or ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Append = Append ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Unstring = Unstring ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype LeqI = LeqI ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype EqI = EqI ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype EqB = EqB ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype LeqC = LeqC ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype EqC = EqC ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Leqs = Leqs ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Eqs = Eqs ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype ConcatS = ConcatS ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Add = Add ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Subtract = Subtract ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Mul = Mul ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Quot = Quot ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Rem = Rem ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Case = Case ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype If = If ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Rec = Rec ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Get = Get ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Put = Put ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Hput = Hput ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Shput = Shput ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Hcase = Hcase ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Split = Split ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Fork = Fork ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Plug = Plug ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Run = Run ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Race = Race ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Close = Close ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Halt = Halt ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ch_Id = Ch_Id ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Main_run = Main_run ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype BBool = BBool ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Character = Character ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype UIdent = UIdent ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype PIdent = PIdent ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype PInteger = PInteger ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype IIdent = IIdent ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Store where
  hasPosition (Store (p, _)) = C.Just p

instance HasPosition Load where
  hasPosition (Load (p, _)) = C.Just p

instance HasPosition Ret where
  hasPosition (Ret (p, _)) = C.Just p

instance HasPosition Call where
  hasPosition (Call (p, _)) = C.Just p

instance HasPosition CInt where
  hasPosition (CInt (p, _)) = C.Just p

instance HasPosition CChar where
  hasPosition (CChar (p, _)) = C.Just p

instance HasPosition CBool where
  hasPosition (CBool (p, _)) = C.Just p

instance HasPosition CString where
  hasPosition (CString (p, _)) = C.Just p

instance HasPosition ToStr where
  hasPosition (ToStr (p, _)) = C.Just p

instance HasPosition ToInt where
  hasPosition (ToInt (p, _)) = C.Just p

instance HasPosition And where
  hasPosition (And (p, _)) = C.Just p

instance HasPosition Or where
  hasPosition (Or (p, _)) = C.Just p

instance HasPosition Append where
  hasPosition (Append (p, _)) = C.Just p

instance HasPosition Unstring where
  hasPosition (Unstring (p, _)) = C.Just p

instance HasPosition LeqI where
  hasPosition (LeqI (p, _)) = C.Just p

instance HasPosition EqI where
  hasPosition (EqI (p, _)) = C.Just p

instance HasPosition EqB where
  hasPosition (EqB (p, _)) = C.Just p

instance HasPosition LeqC where
  hasPosition (LeqC (p, _)) = C.Just p

instance HasPosition EqC where
  hasPosition (EqC (p, _)) = C.Just p

instance HasPosition Leqs where
  hasPosition (Leqs (p, _)) = C.Just p

instance HasPosition Eqs where
  hasPosition (Eqs (p, _)) = C.Just p

instance HasPosition ConcatS where
  hasPosition (ConcatS (p, _)) = C.Just p

instance HasPosition Add where
  hasPosition (Add (p, _)) = C.Just p

instance HasPosition Subtract where
  hasPosition (Subtract (p, _)) = C.Just p

instance HasPosition Mul where
  hasPosition (Mul (p, _)) = C.Just p

instance HasPosition Quot where
  hasPosition (Quot (p, _)) = C.Just p

instance HasPosition Rem where
  hasPosition (Rem (p, _)) = C.Just p

instance HasPosition Case where
  hasPosition (Case (p, _)) = C.Just p

instance HasPosition If where
  hasPosition (If (p, _)) = C.Just p

instance HasPosition Rec where
  hasPosition (Rec (p, _)) = C.Just p

instance HasPosition Get where
  hasPosition (Get (p, _)) = C.Just p

instance HasPosition Put where
  hasPosition (Put (p, _)) = C.Just p

instance HasPosition Hput where
  hasPosition (Hput (p, _)) = C.Just p

instance HasPosition Shput where
  hasPosition (Shput (p, _)) = C.Just p

instance HasPosition Hcase where
  hasPosition (Hcase (p, _)) = C.Just p

instance HasPosition Split where
  hasPosition (Split (p, _)) = C.Just p

instance HasPosition Fork where
  hasPosition (Fork (p, _)) = C.Just p

instance HasPosition Plug where
  hasPosition (Plug (p, _)) = C.Just p

instance HasPosition Run where
  hasPosition (Run (p, _)) = C.Just p

instance HasPosition Race where
  hasPosition (Race (p, _)) = C.Just p

instance HasPosition Close where
  hasPosition (Close (p, _)) = C.Just p

instance HasPosition Halt where
  hasPosition (Halt (p, _)) = C.Just p

instance HasPosition Ch_Id where
  hasPosition (Ch_Id (p, _)) = C.Just p

instance HasPosition Main_run where
  hasPosition (Main_run (p, _)) = C.Just p

instance HasPosition BBool where
  hasPosition (BBool (p, _)) = C.Just p

instance HasPosition Character where
  hasPosition (Character (p, _)) = C.Just p

instance HasPosition UIdent where
  hasPosition (UIdent (p, _)) = C.Just p

instance HasPosition PIdent where
  hasPosition (PIdent (p, _)) = C.Just p

instance HasPosition PInteger where
  hasPosition (PInteger (p, _)) = C.Just p

instance HasPosition IIdent where
  hasPosition (IIdent (p, _)) = C.Just p

