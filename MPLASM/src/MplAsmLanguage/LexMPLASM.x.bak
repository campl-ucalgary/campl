-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}

{-# LANGUAGE PatternSynonyms #-}

module MplAsmLanguage.LexMPLASM where

import Prelude

import qualified Data.Bits
import Data.Char     (ord)
import Data.Function (on)
import Data.Word     (Word8)
}

-- Predefined character classes

$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

-- Symbols and non-identifier-like reserved words

@rsyms = \= | \{ | \} | \; | \% "include" | \% "constructors" | \: | \% "destructors" | \% "protocols" | \% "coprotocols" | \% "processes" | \( | \| | \= \> | \) | \, | \% "functions" | \: \= | \. | \# | \[ | \] | \- \>

:-

-- Line comment "--"
"--" [.]* ;

-- Block comment "/*" "*/"
\/ \* [$u # \*]* \* ([$u # [\* \/]] [$u # \*]* \* | \*)* \/ ;

-- Whitespace (skipped)
$white+ ;

-- Symbols
@rsyms
    { tok (eitherResIdent TV) }

-- token Store
s t o r e
    { tok (eitherResIdent T_Store) }

-- token Load
l o a d
    { tok (eitherResIdent T_Load) }

-- token Ret
r e t
    { tok (eitherResIdent T_Ret) }

-- token Call
c a l l
    { tok (eitherResIdent T_Call) }

-- token CInt
c I n t
    { tok (eitherResIdent T_CInt) }

-- token CChar
c C h a r
    { tok (eitherResIdent T_CChar) }

-- token CBool
c B o o l
    { tok (eitherResIdent T_CBool) }

-- token CString
c S t r i n g
    { tok (eitherResIdent T_CString) }

-- token ToStr
t o S t r
    { tok (eitherResIdent T_ToStr) }

-- token ToInt
t o I n t
    { tok (eitherResIdent T_ToInt) }

-- token And
A n d
    { tok (eitherResIdent T_And) }

-- token Or
o r
    { tok (eitherResIdent T_Or) }

-- token Append
a p p e n d L
    { tok (eitherResIdent T_Append) }

-- token Unstring
u n s t r i n g
    { tok (eitherResIdent T_Unstring) }

-- token LeqI
l e q
    { tok (eitherResIdent T_LeqI) }

-- token EqI
e q i
    { tok (eitherResIdent T_EqI) }

-- token EqB
e q b
    { tok (eitherResIdent T_EqB) }

-- token LeqC
l e q c
    { tok (eitherResIdent T_LeqC) }

-- token EqC
e q c
    { tok (eitherResIdent T_EqC) }

-- token Leqs
l e q s
    { tok (eitherResIdent T_Leqs) }

-- token Eqs
e q s
    { tok (eitherResIdent T_Eqs) }

-- token ConcatS
c o n c a t S
    { tok (eitherResIdent T_ConcatS) }

-- token Add
a d d
    { tok (eitherResIdent T_Add) }

-- token Subtract
s u b t r a c t
    { tok (eitherResIdent T_Subtract) }

-- token Mul
m u l
    { tok (eitherResIdent T_Mul) }

-- token Quot
q u o t
    { tok (eitherResIdent T_Quot) }

-- token Rem
r e m
    { tok (eitherResIdent T_Rem) }

-- token Case
c a s e
    { tok (eitherResIdent T_Case) }

-- token If
i f
    { tok (eitherResIdent T_If) }

-- token Rec
r e c
    { tok (eitherResIdent T_Rec) }

-- token Get
g e t
    { tok (eitherResIdent T_Get) }

-- token Put
p u t
    { tok (eitherResIdent T_Put) }

-- token Hput
h p u t
    { tok (eitherResIdent T_Hput) }

-- token Shput
s h p u t
    { tok (eitherResIdent T_Shput) }

-- token Hcase
h c a s e
    { tok (eitherResIdent T_Hcase) }

-- token Split
s p l i t
    { tok (eitherResIdent T_Split) }

-- token Fork
f o r k
    { tok (eitherResIdent T_Fork) }

-- token Plug
p l u g
    { tok (eitherResIdent T_Plug) }

-- token Run
r u n
    { tok (eitherResIdent T_Run) }

-- token Race
r a c e
    { tok (eitherResIdent T_Race) }

-- token Close
c l o s e
    { tok (eitherResIdent T_Close) }

-- token Halt
h a l t
    { tok (eitherResIdent T_Halt) }

-- token Ch_Id
\| \= \|
    { tok (eitherResIdent T_Ch_Id) }

-- token Main_run
\% r u n
    { tok (eitherResIdent T_Main_run) }

-- token BBool
T r u e | F a l s e
    { tok (eitherResIdent T_BBool) }

-- token Character
\' ([$u # [\' \\]] | \\ [\' \\ n t]) \'
    { tok (eitherResIdent T_Character) }

-- token UIdent
$c (\_ | ($d | $l)) * | \# $c (\_ | ($d | $l)) *
    { tok (eitherResIdent T_UIdent) }

-- token PIdent
$l ([\' \_]| ($d | $l)) * | \# $c (\_ | ($d | $l)) *
    { tok (eitherResIdent T_PIdent) }

-- token PInteger
(\- $d | $d)$d *
    { tok (eitherResIdent T_PInteger) }

-- token IIdent
\" $u * (\. a m p l)\"
    { tok (eitherResIdent T_IIdent) }

-- Keywords and Ident
$l $i*
    { tok (eitherResIdent TV) }

-- String
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t | r | f)))* \"
    { tok (TL . unescapeInitTail) }

-- Integer
$d+
    { tok TI }

{
-- | Create a token with position.
tok :: (String -> Tok) -> (Posn -> String -> Token)
tok f p = PT p . f

-- | Token without position.
data Tok
  = TK {-# UNPACK #-} !TokSymbol  -- ^ Reserved word or symbol.
  | TL !String                    -- ^ String literal.
  | TI !String                    -- ^ Integer literal.
  | TV !String                    -- ^ Identifier.
  | TD !String                    -- ^ Float literal.
  | TC !String                    -- ^ Character literal.
  | T_Store !String
  | T_Load !String
  | T_Ret !String
  | T_Call !String
  | T_CInt !String
  | T_CChar !String
  | T_CBool !String
  | T_CString !String
  | T_ToStr !String
  | T_ToInt !String
  | T_And !String
  | T_Or !String
  | T_Append !String
  | T_Unstring !String
  | T_LeqI !String
  | T_EqI !String
  | T_EqB !String
  | T_LeqC !String
  | T_EqC !String
  | T_Leqs !String
  | T_Eqs !String
  | T_ConcatS !String
  | T_Add !String
  | T_Subtract !String
  | T_Mul !String
  | T_Quot !String
  | T_Rem !String
  | T_Case !String
  | T_If !String
  | T_Rec !String
  | T_Get !String
  | T_Put !String
  | T_Hput !String
  | T_Shput !String
  | T_Hcase !String
  | T_Split !String
  | T_Fork !String
  | T_Plug !String
  | T_Run !String
  | T_Race !String
  | T_Close !String
  | T_Halt !String
  | T_Ch_Id !String
  | T_Main_run !String
  | T_BBool !String
  | T_Character !String
  | T_UIdent !String
  | T_PIdent !String
  | T_PInteger !String
  | T_IIdent !String
  deriving (Eq, Show, Ord)

-- | Smart constructor for 'Tok' for the sake of backwards compatibility.
pattern TS :: String -> Int -> Tok
pattern TS t i = TK (TokSymbol t i)

-- | Keyword or symbol tokens have a unique ID.
data TokSymbol = TokSymbol
  { tsText :: String
      -- ^ Keyword or symbol text.
  , tsID   :: !Int
      -- ^ Unique ID.
  } deriving (Show)

-- | Keyword/symbol equality is determined by the unique ID.
instance Eq  TokSymbol where (==)    = (==)    `on` tsID

-- | Keyword/symbol ordering is determined by the unique ID.
instance Ord TokSymbol where compare = compare `on` tsID

-- | Token with position.
data Token
  = PT  Posn Tok
  | Err Posn
  deriving (Eq, Show, Ord)

-- | Pretty print a position.
printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

-- | Pretty print the position of the first token in the list.
tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos []    = "end of file"

-- | Get the position of a token.
tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p)  = p

-- | Get line and column of a token.
tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

-- | Get line and column of a position.
posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

-- | Convert a token into "position token" form.
mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t = (tokenLineCol t, tokenText t)

-- | Convert a token to its text.
tokenText :: Token -> String
tokenText t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> "#error"
  PT _ (T_Store s) -> s
  PT _ (T_Load s) -> s
  PT _ (T_Ret s) -> s
  PT _ (T_Call s) -> s
  PT _ (T_CInt s) -> s
  PT _ (T_CChar s) -> s
  PT _ (T_CBool s) -> s
  PT _ (T_CString s) -> s
  PT _ (T_ToStr s) -> s
  PT _ (T_ToInt s) -> s
  PT _ (T_And s) -> s
  PT _ (T_Or s) -> s
  PT _ (T_Append s) -> s
  PT _ (T_Unstring s) -> s
  PT _ (T_LeqI s) -> s
  PT _ (T_EqI s) -> s
  PT _ (T_EqB s) -> s
  PT _ (T_LeqC s) -> s
  PT _ (T_EqC s) -> s
  PT _ (T_Leqs s) -> s
  PT _ (T_Eqs s) -> s
  PT _ (T_ConcatS s) -> s
  PT _ (T_Add s) -> s
  PT _ (T_Subtract s) -> s
  PT _ (T_Mul s) -> s
  PT _ (T_Quot s) -> s
  PT _ (T_Rem s) -> s
  PT _ (T_Case s) -> s
  PT _ (T_If s) -> s
  PT _ (T_Rec s) -> s
  PT _ (T_Get s) -> s
  PT _ (T_Put s) -> s
  PT _ (T_Hput s) -> s
  PT _ (T_Shput s) -> s
  PT _ (T_Hcase s) -> s
  PT _ (T_Split s) -> s
  PT _ (T_Fork s) -> s
  PT _ (T_Plug s) -> s
  PT _ (T_Run s) -> s
  PT _ (T_Race s) -> s
  PT _ (T_Close s) -> s
  PT _ (T_Halt s) -> s
  PT _ (T_Ch_Id s) -> s
  PT _ (T_Main_run s) -> s
  PT _ (T_BBool s) -> s
  PT _ (T_Character s) -> s
  PT _ (T_UIdent s) -> s
  PT _ (T_PIdent s) -> s
  PT _ (T_PInteger s) -> s
  PT _ (T_IIdent s) -> s

-- | Convert a token to a string.
prToken :: Token -> String
prToken t = tokenText t

-- | Finite map from text to token organized as binary search tree.
data BTree
  = N -- ^ Nil (leaf).
  | B String Tok BTree BTree
      -- ^ Binary node.
  deriving (Show)

-- | Convert potential keyword into token or use fallback conversion.
eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) =
    case compare s a of
      LT -> treeFind left
      GT -> treeFind right
      EQ -> t

-- | The keywords and symbols of the language organized as binary search tree.
resWords :: BTree
resWords =
  b ";" 16
    (b "%protocols" 8
       (b "%destructors" 4
          (b "%constructors" 2 (b "#" 1 N N) (b "%coprotocols" 3 N N))
          (b "%include" 6 (b "%functions" 5 N N) (b "%processes" 7 N N)))
       (b "->" 12
          (b ")" 10 (b "(" 9 N N) (b "," 11 N N))
          (b ":" 14 (b "." 13 N N) (b ":=" 15 N N))))
    (b "of" 24
       (b "]" 20
          (b "=>" 18 (b "=" 17 N N) (b "[" 19 N N))
          (b "else" 22 (b "as" 21 N N) (b "into" 23 N N)))
       (b "{" 28
          (b "then" 26 (b "on" 25 N N) (b "with" 27 N N))
          (b "}" 30 (b "|" 29 N N) N)))
  where
  b s n = B bs (TS bs n)
    where
    bs = s

-- | Unquote string literal.
unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id
  where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]       -> []
    c:cs         -> c : unesc cs
    _            -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
  deriving (Eq, Show, Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
  where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
