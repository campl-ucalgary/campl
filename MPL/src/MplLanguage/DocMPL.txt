The Language MPL
BNF Converter


%Process by txt2tags to generate html or latex



This document was automatically generated by the //BNF-Converter//. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).

==The lexical structure of MPL==

===Literals===











































PInteger literals are recognized by the regular expression
`````('-' digit | digit) digit*`````

PDouble literals are recognized by the regular expression
`````digit+ '.' digit+ ('e' '-'? digit+)?`````

PChar literals are recognized by the regular expression
`````''' (char - ["'\"] | '\' ["'\fnrt"]) '''`````

PString literals are recognized by the regular expression
`````'"' (char - [""\"] | '\' [""\fnrt"])* '"'`````

Par literals are recognized by the regular expression
`````{"(+)"}`````

Tensor literals are recognized by the regular expression
`````{"(*)"}`````

LBracket literals are recognized by the regular expression
`````'('`````

RBracket literals are recognized by the regular expression
`````')'`````

LSquareBracket literals are recognized by the regular expression
`````'['`````

RSquareBracket literals are recognized by the regular expression
`````']'`````

NullPattern literals are recognized by the regular expression
`````'_'`````

Colon literals are recognized by the regular expression
`````':'`````

Infixl3op literals are recognized by the regular expression
`````{"=="} | {"/="} | '<' | '>' | {"<="} | {">="}`````

Infixl5op literals are recognized by the regular expression
`````["+-"]`````

Infixl6op literals are recognized by the regular expression
`````["*/"]`````

ChId literals are recognized by the regular expression
`````{"|=|"}`````

InfixU1op literals are recognized by the regular expression
`````'|' (["!#$%&*+-/:<>?@^_|~"] ["!#$%&*+-/:<=>?@^_|~"]* | '=' ["!#$%&*+-/:<=?@^_|~"] ["!#$%&*+-/:<=>?@^_|~"]* | {"=>"} ["!#$%&*+-/:<=>?@^_|~"]+)`````

InfixU2op literals are recognized by the regular expression
`````'&' ["!#$%&*+-/:<=>?@^_|~"]*`````

InfixU3op literals are recognized by the regular expression
`````["!<>"] ["!#$%&*+-/:<=>?@^_|~"]*`````

InfixU5op literals are recognized by the regular expression
`````["+-"] ["!#$%&*+-/:<=>?@^_|~"]*`````

InfixU6op literals are recognized by the regular expression
`````["%*/"] ["!#$%&*+-/:<=>?@^_|~"]*`````

InfixU7op literals are recognized by the regular expression
`````'^' ["!#$%&*+-/:<=>?@^_|~"]*`````

Infixl1op literals are recognized by the regular expression
`````{"||"}`````

Infixl2op literals are recognized by the regular expression
`````{"&&"}`````

Infixl4op literals are recognized by the regular expression
`````{"++"}`````

Infixr7op literals are recognized by the regular expression
`````'^'`````

Infixl8op literals are recognized by the regular expression
`````{"!!"}`````

Close literals are recognized by the regular expression
`````{"close"}`````

Halt literals are recognized by the regular expression
`````{"halt"}`````

Get literals are recognized by the regular expression
`````{"get"}`````

Put literals are recognized by the regular expression
`````{"put"}`````

HCase literals are recognized by the regular expression
`````{"hcase"}`````

HPut literals are recognized by the regular expression
`````{"hput"}`````

Split literals are recognized by the regular expression
`````{"split"}`````

Fork literals are recognized by the regular expression
`````{"fork"}`````

StoreType literals are recognized by the regular expression
`````{"Store"}`````

Store literals are recognized by the regular expression
`````{"store"}`````

Use literals are recognized by the regular expression
`````{"use"}`````

Case literals are recognized by the regular expression
`````{"case"}`````

UIdent literals are recognized by the regular expression
`````upper ('_' | digit | letter)*`````

PIdent literals are recognized by the regular expression
`````('_' | letter) (["'_"] | digit | letter)*`````

UPIdent literals are recognized by the regular expression
`````letter (["'_"] | digit | letter)*`````


===Reserved words and symbols===
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.

The reserved words used in MPL are the following:
  | ``and`` | ``as`` | ``codata`` | ``coprotocol``
  | ``data`` | ``defn`` | ``do`` | ``else``
  | ``fold`` | ``fun`` | ``if`` | ``in``
  | ``include`` | ``into`` | ``let`` | ``neg``
  | ``of`` | ``on`` | ``plug`` | ``potato``
  | ``proc`` | ``protocol`` | ``race`` | ``switch``
  | ``then`` | ``unfold`` | ``where`` | ``with``

The symbols used in MPL are the following:
  | , | { | } | ;
  | | | -> | = | ::
  | => | . | := |

===Comments===
Single-line comments begin with --.Multiple-line comments are  enclosed with {- and -}.

==The syntactic structure of MPL==
Non-terminals are enclosed between < and >.
The symbols -> (production),  **|**  (union)
and **eps** (empty rule) belong to the BNF notation.
All other symbols are terminals.

  | //[PIdent]// | -> | **eps**
  |  |  **|**  | //PIdent//
  |  |  **|**  | //PIdent// ``,`` //[PIdent]//
  | //MplProg// | -> | //[MplStmt]//
  | //MplStmt// | -> | ``defn`` ``{`` //[MplDefn]// ``}`` ``where`` ``{`` //[MplWhere]// ``}``
  |  |  **|**  | ``defn`` ``{`` //[MplDefn]// ``}``
  |  |  **|**  | //MplDefn//
  | //[MplDefn]// | -> | //MplDefn//
  |  |  **|**  | //MplDefn// ``;`` //[MplDefn]//
  | //[MplStmt]// | -> | **eps**
  |  |  **|**  | //MplStmt// //[MplStmt]//
  | //MplWhere// | -> | //MplStmt//
  | //[MplWhere]// | -> | **eps**
  |  |  **|**  | //MplWhere//
  |  |  **|**  | //MplWhere// ``;`` //[MplWhere]//
  | //MplDefn// | -> | //SequentialTypeDefn//
  |  |  **|**  | //ConcurrentTypeDefn//
  |  |  **|**  | //FunctionDefn//
  |  |  **|**  | //ProcessDefn//
  |  |  **|**  | //ImportDefn//
  |  |  **|**  | ``potato``
  | //MplType// | -> | //MplType0//
  | //MplType0// | -> | //MplType1// //Par// //MplType1//
  |  |  **|**  | //MplType1//
  | //MplType1// | -> | //MplType2// //Tensor// //MplType2//
  |  |  **|**  | //MplType2//
  | //MplType2// | -> | //UIdent// //LBracket// //[MplType]// //RBracket//
  |  |  **|**  | //UIdent// //LBracket// //[MplType]// ``|`` //[MplType]// //RBracket//
  |  |  **|**  | //UIdent//
  |  |  **|**  | //LBracket// //RBracket//
  |  |  **|**  | //LBracket// //MplType// //RBracket//
  |  |  **|**  | //LSquareBracket// //MplType// //RSquareBracket//
  |  |  **|**  | //LBracket// //MplType// ``,`` //[TupleListType]// //RBracket//
  |  |  **|**  | //StoreType// //LBracket// //ProcessType// //RBracket//
  | //TupleListType// | -> | //MplType//
  | //ForallVarList// | -> | //UIdent//
  | //[ForallVarList]// | -> | **eps**
  |  |  **|**  | //ForallVarList// //[ForallVarList]//
  | //[TupleListType]// | -> | //TupleListType//
  |  |  **|**  | //TupleListType// ``,`` //[TupleListType]//
  | //[MplType]// | -> | **eps**
  |  |  **|**  | //MplType//
  |  |  **|**  | //MplType// ``,`` //[MplType]//
  | //SequentialTypeDefn// | -> | ``data`` //[SeqTypeClauseDefn]//
  |  |  **|**  | ``codata`` //[SeqTypeClauseDefn]//
  | //SeqTypeClauseDefn// | -> | //MplType// ``->`` //MplType// ``=`` ``{`` //[SeqTypePhraseDefn]// ``}``
  | //SeqTypePhraseDefn// | -> | //[TypeHandleName]// ``::`` //[MplType]// ``->`` //MplType//
  | //[SeqTypeClauseDefn]// | -> | //SeqTypeClauseDefn//
  |  |  **|**  | //SeqTypeClauseDefn// ``and`` //[SeqTypeClauseDefn]//
  | //[SeqTypePhraseDefn]// | -> | **eps**
  |  |  **|**  | //SeqTypePhraseDefn//
  |  |  **|**  | //SeqTypePhraseDefn// ``;`` //[SeqTypePhraseDefn]//
  | //ConcurrentTypeDefn// | -> | ``protocol`` //[ConcurrentTypeClauseDefn]//
  |  |  **|**  | ``coprotocol`` //[ConcurrentTypeClauseDefn]//
  | //ConcurrentTypeClauseDefn// | -> | //MplType// ``=>`` //MplType// ``=`` ``{`` //[ConcurrentTypePhraseDefn]// ``}``
  | //ConcurrentTypePhraseDefn// | -> | //[TypeHandleName]// ``::`` //MplType// ``=>`` //MplType//
  | //[ConcurrentTypeClauseDefn]// | -> | //ConcurrentTypeClauseDefn//
  |  |  **|**  | //ConcurrentTypeClauseDefn// ``and`` //[ConcurrentTypeClauseDefn]//
  | //[ConcurrentTypePhraseDefn]// | -> | **eps**
  |  |  **|**  | //ConcurrentTypePhraseDefn//
  |  |  **|**  | //ConcurrentTypePhraseDefn// ``;`` //[ConcurrentTypePhraseDefn]//
  | //TypeHandleName// | -> | //UIdent//
  | //[TypeHandleName]// | -> | //TypeHandleName//
  |  |  **|**  | //TypeHandleName// ``,`` //[TypeHandleName]//
  | //Expr// | -> | //Expr0//
  |  |  **|**  | ``if`` //Expr// ``then`` //Expr// ``else`` //Expr//
  |  |  **|**  | ``let`` ``{`` //[LetExprPhrase]// ``}`` ``in`` //Expr//
  | //Expr0// | -> | //Expr1// //Colon// //Expr0//
  |  |  **|**  | //Expr1//
  | //Expr1// | -> | //Expr1// //Infixl1op// //Expr2//
  |  |  **|**  | //Expr1// //InfixU1op// //Expr2//
  |  |  **|**  | //Expr2//
  | //Expr2// | -> | //Expr2// //Infixl2op// //Expr3//
  |  |  **|**  | //Expr2// //InfixU2op// //Expr3//
  |  |  **|**  | //Expr3//
  | //Expr3// | -> | //Expr3// //Infixl3op// //Expr4//
  |  |  **|**  | //Expr3// //InfixU3op// //Expr4//
  |  |  **|**  | //Expr4//
  | //Expr4// | -> | //Expr4// //Infixl4op// //Expr5//
  |  |  **|**  | //Expr5//
  | //Expr5// | -> | //Expr5// //Infixl5op// //Expr6//
  |  |  **|**  | //Expr5// //InfixU5op// //Expr6//
  |  |  **|**  | //Expr6//
  | //Expr6// | -> | //Expr6// //Infixl6op// //Expr7//
  |  |  **|**  | //Expr6// //InfixU6op// //Expr7//
  |  |  **|**  | //Expr7//
  | //Expr7// | -> | //Expr8// //Infixr7op// //Expr7//
  |  |  **|**  | //Expr8// //InfixU7op// //Expr7//
  |  |  **|**  | //Expr8//
  | //Expr8// | -> | //Expr8// //Infixl8op// //Expr10//
  |  |  **|**  | //Expr10//
  | //Expr10// | -> | //LBracket// //InfixUop// //RBracket// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //LBracket// //Infixl1op// //RBracket// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //LBracket// //Infixl2op// //RBracket// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //LBracket// //Infixl3op// //RBracket// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //LBracket// //Infixl4op// //RBracket// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //LBracket// //Infixl5op// //RBracket// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //LBracket// //Infixl6op// //RBracket// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //LBracket// //Infixr7op// //RBracket// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //LBracket// //Infixl8op// //RBracket// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //Par// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //Tensor// //LBracket// //Expr// ``,`` //Expr// //RBracket//
  |  |  **|**  | //LSquareBracket// //[Expr]// //RSquareBracket//
  |  |  **|**  | //PIdent//
  |  |  **|**  | //PInteger//
  |  |  **|**  | //PString//
  |  |  **|**  | //PChar//
  |  |  **|**  | //PDouble//
  |  |  **|**  | //LBracket// //RBracket//
  |  |  **|**  | ``fold`` //Expr// ``of`` ``{`` //[FoldExprPhrase]// ``}``
  |  |  **|**  | ``unfold`` //Expr// ``of`` ``{`` //[UnfoldExprPhrase]// ``}``
  |  |  **|**  | //Case// //Expr// ``of`` ``{`` //[PattExprPhrase]// ``}``
  |  |  **|**  | ``switch`` ``{`` //[SwitchExprPhrase]// ``}``
  |  |  **|**  | //Store// //LBracket// //ProcessNp// //RBracket//
  |  |  **|**  | //UIdent// //LBracket// //[Expr]// //RBracket//
  |  |  **|**  | //UIdent//
  |  |  **|**  | //LBracket// //Expr// ``,`` //[TupleExprList]// //RBracket//
  |  |  **|**  | //PIdent// //LBracket// //[Expr]// //RBracket//
  |  |  **|**  | //LBracket// //[RecordExprPhrase]// //RBracket//
  |  |  **|**  | //UIdent// ``.`` //PIdent// //LBracket// //[Expr]// //RBracket//
  |  |  **|**  | //LBracket// //Expr// //RBracket//
  | //InfixUop// | -> | //InfixU1op//
  |  |  **|**  | //InfixU2op//
  |  |  **|**  | //InfixU3op//
  |  |  **|**  | //InfixU5op//
  |  |  **|**  | //InfixU6op//
  |  |  **|**  | //InfixU7op//
  | //ProcessNp// | -> | //ProcessPhrase//
  |  |  **|**  | //PIdent//
  | //UnfoldExprPhrase// | -> | //Pattern// ``of`` ``{`` //[FoldExprPhrase]// ``}``
  | //[UnfoldExprPhrase]// | -> | //UnfoldExprPhrase//
  |  |  **|**  | //UnfoldExprPhrase// ``;`` //[UnfoldExprPhrase]//
  | //FoldExprPhrase// | -> | //UIdent// //Colon// //[Pattern]// ``->`` //Expr//
  | //[FoldExprPhrase]// | -> | //FoldExprPhrase//
  |  |  **|**  | //FoldExprPhrase// ``;`` //[FoldExprPhrase]//
  | //LetExprPhrase// | -> | //MplStmt//
  | //[LetExprPhrase]// | -> | //LetExprPhrase//
  |  |  **|**  | //LetExprPhrase// ``;`` //[LetExprPhrase]//
  | //TupleExprList// | -> | //Expr//
  | //[TupleExprList]// | -> | //TupleExprList//
  |  |  **|**  | //TupleExprList// ``,`` //[TupleExprList]//
  | //RecordExprPhrase// | -> | //UIdent// ``:=`` //PattExprPhrase//
  | //[RecordExprPhrase]// | -> | //RecordExprPhrase//
  |  |  **|**  | //RecordExprPhrase// ``,`` //[RecordExprPhrase]//
  | //SwitchExprPhrase// | -> | //Expr// ``->`` //Expr//
  | //[SwitchExprPhrase]// | -> | //SwitchExprPhrase//
  |  |  **|**  | //SwitchExprPhrase// ``;`` //[SwitchExprPhrase]//
  | //[Expr]// | -> | **eps**
  |  |  **|**  | //Expr//
  |  |  **|**  | //Expr// ``,`` //[Expr]//
  | //PattExprPhrase// | -> | //[Pattern]// ``->`` //Expr//
  | //Pattern// | -> | //Pattern0//
  | //[Pattern]// | -> | **eps**
  |  |  **|**  | //Pattern//
  |  |  **|**  | //Pattern// ``,`` //[Pattern]//
  | //Pattern0// | -> | //Pattern1// //Colon// //Pattern0//
  |  |  **|**  | //Pattern1//
  | //Pattern1// | -> | //UIdent// //LBracket// //[Pattern]// //RBracket//
  |  |  **|**  | //UIdent//
  |  |  **|**  | //LBracket// //RBracket//
  |  |  **|**  | //LBracket// //[DestructorPatternPhrase]// //RBracket//
  |  |  **|**  | //LSquareBracket// //[Pattern]// //RSquareBracket//
  |  |  **|**  | //LBracket// //Pattern// ``,`` //[TupleListPattern]// //RBracket//
  |  |  **|**  | //PIdent//
  |  |  **|**  | //PString//
  |  |  **|**  | //PChar//
  |  |  **|**  | //PInteger//
  |  |  **|**  | //NullPattern//
  |  |  **|**  | //LBracket// //Pattern// //RBracket//
  | //TupleListPattern// | -> | //Pattern//
  | //[TupleListPattern]// | -> | //TupleListPattern//
  |  |  **|**  | //TupleListPattern// ``,`` //[TupleListPattern]//
  | //DestructorPatternPhrase// | -> | //UIdent// ``:=`` //Pattern//
  | //[DestructorPatternPhrase]// | -> | //DestructorPatternPhrase//
  |  |  **|**  | //DestructorPatternPhrase// ``,`` //[DestructorPatternPhrase]//
  | //FunctionDefn// | -> | ``fun`` //PIdent// ``::`` //[MplType]// ``->`` //MplType// ``=`` ``{`` //[PattExprPhrase]// ``}``
  |  |  **|**  | ``fun`` //PIdent// ``=`` ``{`` //[PattExprPhrase]// ``}``
  |  |  **|**  | ``fun`` //LBracket// //InfixUop// //RBracket// ``::`` //MplType// ``,`` //MplType// ``->`` //MplType// ``=`` ``{`` //[PattExprPhrase]// ``}``
  |  |  **|**  | ``fun`` //LBracket// //InfixUop// //RBracket// ``=`` ``{`` //[PattExprPhrase]// ``}``
  | //[PattExprPhrase]// | -> | //PattExprPhrase//
  |  |  **|**  | //PattExprPhrase// ``;`` //[PattExprPhrase]//
  | //ProcessType// | -> | //[MplType]// ``|`` //[MplType]// ``=>`` //[MplType]//
  | //ProcessDefn// | -> | ``proc`` //PIdent// ``::`` //ProcessType// ``=`` ``{`` //[ProcessPhrase]// ``}``
  |  |  **|**  | ``proc`` //PIdent// ``=`` ``{`` //[ProcessPhrase]// ``}``
  | //ProcessPhrase// | -> | //[Pattern]// ``|`` //[PIdent]// ``=>`` //[PIdent]// ``->`` //ProcessCommandsBlock//
  | //[ProcessPhrase]// | -> | //ProcessPhrase//
  |  |  **|**  | //ProcessPhrase// ``;`` //[ProcessPhrase]//
  | //ProcessCommandsBlock// | -> | ``do`` ``{`` //[ProcessCommand]// ``}``
  |  |  **|**  | //ProcessCommand//
  | //[ProcessCommand]// | -> | //ProcessCommand//
  |  |  **|**  | //ProcessCommand// ``;`` //[ProcessCommand]//
  | //ProcessCall// | -> | //PIdent//
  |  |  **|**  | //Use// //LBracket// //Expr// //RBracket//
  | //ProcessCommand// | -> | //ProcessCall// //LBracket// //[Expr]// ``|`` //[PIdent]// ``=>`` //[PIdent]// //RBracket//
  |  |  **|**  | //Close// //PIdent//
  |  |  **|**  | //Halt// //PIdent//
  |  |  **|**  | //UIdent// ``.`` //PIdent// //LBracket// //[Expr]// ``|`` //[PIdent]// ``=>`` //[PIdent]// //RBracket//
  |  |  **|**  | //Get// //Pattern// ``on`` //PIdent//
  |  |  **|**  | //Put// //Expr// ``on`` //PIdent//
  |  |  **|**  | //HCase// //PIdent// ``of`` ``{`` //[HCasePhrase]// ``}``
  |  |  **|**  | //HPut// //UIdent// ``on`` //PIdent//
  |  |  **|**  | ``on`` //PIdent// ``do`` ``{`` //[OnPhrase]// ``}``
  |  |  **|**  | //Split// //PIdent// ``into`` //[SplitChannel]//
  |  |  **|**  | //Fork// //PIdent// ``as`` ``{`` //[ForkPhrase]// ``}``
  |  |  **|**  | //PIdent// //ChId// //PIdent//
  |  |  **|**  | //PIdent// //ChId// ``neg`` //PIdent//
  |  |  **|**  | ``race`` ``{`` //[RacePhrase]// ``}``
  |  |  **|**  | ``plug`` ``{`` //[PlugPhrase]// ``}``
  |  |  **|**  | //Case// //Expr// ``of`` ``{`` //[ProcessCasePhrase]// ``}``
  |  |  **|**  | ``if`` //Expr// ``then`` //ProcessCommandsBlock// ``else`` //ProcessCommandsBlock//
  |  |  **|**  | ``switch`` ``{`` //[ProcessSwitchPhrase]// ``}``
  | //OnPhrase// | -> | //Put// //Expr//
  |  |  **|**  | //Get// //Pattern//
  |  |  **|**  | //HPut// //UIdent//
  |  |  **|**  | //HCase// ``of`` ``{`` //[HCasePhrase]// ``}``
  |  |  **|**  | //Fork// ``as`` ``{`` //[ForkPhrase]// ``}``
  |  |  **|**  | //Split// ``into`` //[SplitChannel]//
  |  |  **|**  | //Close//
  |  |  **|**  | //Halt//
  | //[OnPhrase]// | -> | **eps**
  |  |  **|**  | //OnPhrase//
  |  |  **|**  | //OnPhrase// ``;`` //[OnPhrase]//
  | //HCasePhrase// | -> | //UIdent// ``->`` //ProcessCommandsBlock//
  | //[HCasePhrase]// | -> | **eps**
  |  |  **|**  | //HCasePhrase//
  |  |  **|**  | //HCasePhrase// ``;`` //[HCasePhrase]//
  | //SplitChannel// | -> | //PIdent//
  | //[SplitChannel]// | -> | //SplitChannel//
  |  |  **|**  | //SplitChannel// ``,`` //[SplitChannel]//
  | //ForkPhrase// | -> | //PIdent// ``->`` //ProcessCommandsBlock//
  |  |  **|**  | //PIdent// ``with`` //[ForkChannel]// ``->`` //ProcessCommandsBlock//
  | //[ForkPhrase]// | -> | //ForkPhrase//
  |  |  **|**  | //ForkPhrase// ``;`` //[ForkPhrase]//
  | //ForkChannel// | -> | //PIdent//
  | //[ForkChannel]// | -> | **eps**
  |  |  **|**  | //ForkChannel//
  |  |  **|**  | //ForkChannel// ``,`` //[ForkChannel]//
  | //RacePhrase// | -> | //PIdent// ``->`` //ProcessCommandsBlock//
  | //[RacePhrase]// | -> | **eps**
  |  |  **|**  | //RacePhrase//
  |  |  **|**  | //RacePhrase// ``;`` //[RacePhrase]//
  | //PlugPhrase// | -> | //ProcessCommandsBlock//
  |  |  **|**  | //[PIdent]// ``=>`` //[PIdent]// ``->`` //ProcessCommandsBlock//
  | //[PlugPhrase]// | -> | //PlugPhrase//
  |  |  **|**  | //PlugPhrase// ``;`` //[PlugPhrase]//
  | //ProcessCasePhrase// | -> | //Pattern// ``->`` //ProcessCommandsBlock//
  | //[ProcessCasePhrase]// | -> | //ProcessCasePhrase//
  |  |  **|**  | //ProcessCasePhrase// ``;`` //[ProcessCasePhrase]//
  | //ProcessSwitchPhrase// | -> | //Expr// ``->`` //ProcessCommandsBlock//
  | //[ProcessSwitchPhrase]// | -> | //ProcessSwitchPhrase//
  |  |  **|**  | //ProcessSwitchPhrase// ``;`` //[ProcessSwitchPhrase]//
  | //ImportDefn// | -> | ``include`` //PString// //Colon// //UIdent// //LBracket// //[PIdent]// ``|`` //[PIdent]// //RBracket//
  |  |  **|**  | ``include`` //PString// //Colon// //UIdent//
  |  |  **|**  | ``include`` //UIdent// //LBracket// //[PIdent]// ``|`` //[PIdent]// //RBracket//
  |  |  **|**  | ``include`` //UIdent//



%% File generated by the BNF Converter (bnfc 2.9.5).
